package nmt;

import javax.swing.JComponent;
import javax.swing.JFrame;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.image.*;
import javax.imageio.*;
import java.io.*;
import java.awt.Component;
//TODO - draw directly to an imageBuffer instead of drawing to the screen and saving this component

/**
 *  Draws a bar chart representing a list of integer.
 *  The height of each bar is adjusted relative to the data.
 *  This component is re-sizable, so the width and height of the bars is
 *  based on the getWidth() and getHeight() values of the component.
 */
 
 // Note: we will need to save this image so that it may be placed in the web page generated by NMTTracker.
 // see http://java.sun.com/docs/books/tutorial/2d/images/saveimage.html
 // We need to create a BufferedImage in the same manner as this component.
 // The BufferedImage class has a getGraphics method.
public class BarChartComponent extends JComponent {
   
   int[] data;
   int max, min;
   Color barColor;
   boolean writeNumbers = true; //display the data above the bars
   
   /**
    *  Generates the component from a list of integers.
    *  @param list - stores the numbers to display.
    *  list.length = the number of bars to draw and
    *  list[0], list[1], ..., represent the height of the bars.
    */ 
   public BarChartComponent(int[] list, Color c) {
   	data = list;
   	calculateMaxMin();
   	barColor = c;
   	this.setBackground(Color.white);
   	this.setOpaque(true);
   }
   
   public void updateData(int[] list) {
   	data = list;
   	calculateMaxMin();
   	this.repaint();
   }
   
   /**
    *  Draws the data
    *
    */
	public void paintComponent(Graphics g) {
		//Graphics2D g2 = (Graphics2D) g;
		int barWidth = (int) Math.floor( (this.getWidth()-30.0) / data.length );
		double heightFactor = (double)(this.getHeight()-40) / max;
		int x=0;
		int y=0;
		int h;
		int numberDisplayShift; //used to center the numbers over the bars.
		int displayCounter = 0;
		for(int d : data) {
			h = (int) Math.round(heightFactor*d);
			y = this.getHeight()-h-20;
			g.setColor(barColor);
			g.fillRect(x, y, barWidth, h);
			g.setColor(Color.black);  //text color
			if(writeNumbers) {
				if(d<10)
					numberDisplayShift = barWidth/2-5;
				else
					numberDisplayShift = (barWidth<10 ? 0 : barWidth/2-10);
				g.drawString(""+d, x+numberDisplayShift, y-5);
			}
			g.drawString(""+displayCounter++, x+barWidth/2-5, this.getHeight()-8);
			x += (barWidth+2);
		}
		//we should also place 0 1 2 3 ... under the bars to label the scores.
	}
	
	void calculateMaxMin() {
		max = min = data[0];
		for(int k: data) {
			if(k<min)
				min = k;
			if(k>max)
				max = k;
		}
		//System.out.println("Max = " + max + "   min = " + min);
	}
   
	// This is the old version of this method that requires the window be drawn in order to save the image.
	public void saveImageOLD(String format, String filename) throws IOException {
	    // Create a renderable image with the same width and height as the component
	    BufferedImage image = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_ARGB);
	
	    this.paintAll(image.getGraphics());
	
	    // Save the image out to file
	    File f = new File(filename);
	    f.mkdirs();
	    ImageIO.write(image, format, f);
	}
	
	/**
	 *  TODO:  rewrite this method.
	 *
	 */
	public void saveImage(String format, String filename) throws IOException {
	    // Create a renderable image with the same width and height as the component
	    BufferedImage image = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_ARGB);
	    //Use this instead
            //java.awt.Graphics2D g = image.createGraphics();

	    this.paintAll(image.getGraphics());
	
	    // Save the image out to file
	    File f = new File(filename);
	    f.mkdirs();
	    ImageIO.write(image, format, f);
	}



}
 